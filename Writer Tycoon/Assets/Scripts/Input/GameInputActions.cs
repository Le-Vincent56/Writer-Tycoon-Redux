//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace WriterTycoon.Input
{
    public partial class @GameInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""8a224206-f9ef-4504-8895-38211bf1e7b7"",
            ""actions"": [
                {
                    ""name"": ""SetDefaultSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""eb5d05fb-ba27-40c9-adeb-c8e22f9d107d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetFasterSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""f0d750ea-6041-4935-a684-e6bef81fe2de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetFastestSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""9d887042-21e8-4f95-80d2-bb8f0ef03058"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseCalendar"",
                    ""type"": ""Button"",
                    ""id"": ""359ade29-301b-4a7e-9bac-e72f4fb1b9fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3dc44696-3905-4e86-9c63-58916e75b714"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ca39d8ae-6595-4096-8250-f93dc63a8678"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed18a94f-930f-4334-a0bd-d17df6ebb98a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetDefaultSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e93eeac-1917-4fe2-80bb-e8015d1711b6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetFasterSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfd4704a-03c7-4d22-a208-904a5710b32f"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SetFastestSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cadc654a-20be-49e4-b00c-096423aac984"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseCalendar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""a17f6282-e6d2-4e02-8366-4a8d2a991d86"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fe53bb8d-cb2c-4d4b-8d16-f8ca20189035"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c20e1b76-7766-48b6-bc23-2afb8123a50f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a243a4ba-05ef-48f9-9a63-459d80ef73ff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c960230f-39b1-4e87-aa80-ff176cac05d1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d755ff2c-e486-4593-9970-3adf5a01a110"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerControls
            m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
            m_PlayerControls_SetDefaultSpeed = m_PlayerControls.FindAction("SetDefaultSpeed", throwIfNotFound: true);
            m_PlayerControls_SetFasterSpeed = m_PlayerControls.FindAction("SetFasterSpeed", throwIfNotFound: true);
            m_PlayerControls_SetFastestSpeed = m_PlayerControls.FindAction("SetFastestSpeed", throwIfNotFound: true);
            m_PlayerControls_PauseCalendar = m_PlayerControls.FindAction("PauseCalendar", throwIfNotFound: true);
            m_PlayerControls_Move = m_PlayerControls.FindAction("Move", throwIfNotFound: true);
            m_PlayerControls_Interact = m_PlayerControls.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerControls
        private readonly InputActionMap m_PlayerControls;
        private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
        private readonly InputAction m_PlayerControls_SetDefaultSpeed;
        private readonly InputAction m_PlayerControls_SetFasterSpeed;
        private readonly InputAction m_PlayerControls_SetFastestSpeed;
        private readonly InputAction m_PlayerControls_PauseCalendar;
        private readonly InputAction m_PlayerControls_Move;
        private readonly InputAction m_PlayerControls_Interact;
        public struct PlayerControlsActions
        {
            private @GameInputActions m_Wrapper;
            public PlayerControlsActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @SetDefaultSpeed => m_Wrapper.m_PlayerControls_SetDefaultSpeed;
            public InputAction @SetFasterSpeed => m_Wrapper.m_PlayerControls_SetFasterSpeed;
            public InputAction @SetFastestSpeed => m_Wrapper.m_PlayerControls_SetFastestSpeed;
            public InputAction @PauseCalendar => m_Wrapper.m_PlayerControls_PauseCalendar;
            public InputAction @Move => m_Wrapper.m_PlayerControls_Move;
            public InputAction @Interact => m_Wrapper.m_PlayerControls_Interact;
            public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
                @SetDefaultSpeed.started += instance.OnSetDefaultSpeed;
                @SetDefaultSpeed.performed += instance.OnSetDefaultSpeed;
                @SetDefaultSpeed.canceled += instance.OnSetDefaultSpeed;
                @SetFasterSpeed.started += instance.OnSetFasterSpeed;
                @SetFasterSpeed.performed += instance.OnSetFasterSpeed;
                @SetFasterSpeed.canceled += instance.OnSetFasterSpeed;
                @SetFastestSpeed.started += instance.OnSetFastestSpeed;
                @SetFastestSpeed.performed += instance.OnSetFastestSpeed;
                @SetFastestSpeed.canceled += instance.OnSetFastestSpeed;
                @PauseCalendar.started += instance.OnPauseCalendar;
                @PauseCalendar.performed += instance.OnPauseCalendar;
                @PauseCalendar.canceled += instance.OnPauseCalendar;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IPlayerControlsActions instance)
            {
                @SetDefaultSpeed.started -= instance.OnSetDefaultSpeed;
                @SetDefaultSpeed.performed -= instance.OnSetDefaultSpeed;
                @SetDefaultSpeed.canceled -= instance.OnSetDefaultSpeed;
                @SetFasterSpeed.started -= instance.OnSetFasterSpeed;
                @SetFasterSpeed.performed -= instance.OnSetFasterSpeed;
                @SetFasterSpeed.canceled -= instance.OnSetFasterSpeed;
                @SetFastestSpeed.started -= instance.OnSetFastestSpeed;
                @SetFastestSpeed.performed -= instance.OnSetFastestSpeed;
                @SetFastestSpeed.canceled -= instance.OnSetFastestSpeed;
                @PauseCalendar.started -= instance.OnPauseCalendar;
                @PauseCalendar.performed -= instance.OnPauseCalendar;
                @PauseCalendar.canceled -= instance.OnPauseCalendar;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IPlayerControlsActions instance)
            {
                if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
        public interface IPlayerControlsActions
        {
            void OnSetDefaultSpeed(InputAction.CallbackContext context);
            void OnSetFasterSpeed(InputAction.CallbackContext context);
            void OnSetFastestSpeed(InputAction.CallbackContext context);
            void OnPauseCalendar(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
